// Code generated by web DO NOT EDIT

/**
 *  Bla 0.0.1
 */
interface Api {
  (api: {
    method: 'GET',
    path: '/test/{name}',
    params: {
      path: {
        name: string;
      },
      header?: Record<string, string>,
    }
  }): Promise<{
    status: 200,
    body: ResponseTest | string
  }>;
  (api: {
    method: 'GET',
    path: '/test',
    params: {
      header?: Record<string, string>,
    }
  }): Promise<{
    status: 200,
    body: ResponseTest
  }>;
  (api: {
    method: 'GET',
    path: '/sse',
    params: {
      header?: Record<string, string>,
    }
  }): Promise<{
    status: 200,
    body: ResponseTest
  }>;
}

type ResponseTest = {
  say: string;
}

type ClientOptions = {
	url?: string
	beforeRequest?: (api: {
		method: any,
		path: any,
		params: {
			path: any,
			header: any,
			body: any,
			cookie: any,
			query: any
		}
	}) => void,
	afterRequest?: (response: {
		status: number,
		body: any
	}) => void
}

function createClient(options?: ClientOptions): Api {
	const url = options?.url ? options.url : ''
	return (async (api: any) => {
		if (options?.beforeRequest) {
			options.beforeRequest(api)
		}
		const query = new URLSearchParams()
		const queryObj = api?.params?.query || {}
		Object.keys(queryObj).forEach(name => query.set(name, queryObj[name]))
		const queryString = (query.size > 0 ? '?' + query.toString() : '')
		const pathParams = api?.params?.path || {}
		const path = api.path.replace(/{(\w+)}/g, (_, key) => 
			pathParams[key] !== undefined ? pathParams[key] : '{' + key + '}'
		)
		const resp = await fetch(url + path + queryString, {
			method: api.method,
			body: api?.params?.body,
		})
		const result = {
			status: resp.status,
			body: await resp.json()
		}
		if (options?.afterRequest) {
			options.afterRequest(result)
		}
		return result
	}) as Api
}

export {
	createClient
}
